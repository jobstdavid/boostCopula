par2 <- object$par2
# family
family <- getFams(as.numeric(object$family))
fam <- rep(family[1], length(par1))
if (length(family) != 1) {
fam[par1 < 0] <- family[2]
}
m <- maxmat[k, i]
u1 <- (if (mat[k, i] == m) vdirect else vindirect)[k, m,]
vdirect[k, i,] <- BiCopHinv1(u1 = u1,
u2 = vdirect[k + 1, i,],
family = fam,
par = par1,
par2 = par2,
check.pars = FALSE)
if (i < d) {
if (cindirect[k + 1, i]) {
vindirect[k + 1, i,] <- BiCopHfunc2(u1 = u1,
u2 = vdirect[k, i,],
family = fam,
par = par1,
par2 = par2,
check.pars = FALSE)
}
}
}
}
out <- matrix(vdirect[1, , ], ncol = d, byrow = TRUE)
# if (!is.null(boostRVC$Matrix)) {
#   colnames(out) <- boostRVC$names
# }
out <- out[, sort(o[length(o):1], index.return = TRUE)$ix]
return(out)
}
boostRVineNormalize <- function(boostRVC) {
oldOrder <- diag(boostRVC$boostRVM$Matrix)
Matrix <- reorderRVineMatrix(boostRVC$boostRVM$Matrix)
out <- list(Matrix = Matrix,
pair_copulas = boostRVC$pair_copulas,
names = rev(boostRVC$names[oldOrder]),
covariates = boostRVC$covariates)
return(out)
}
U = as.matrix(data_vinecop[, 1:5])
X = as.matrix(data_vinecop[, -c(1:5)])
if (nrow(U) != nrow(X)) {
stop("Rows of U and X need to be of equal length!")
}
N <- nrow(U)
o <- diag(boostRVC$boostRVM$Matrix)
d <- length(o)
boostRVC <- boostRVineNormalize(boostRVC = boostRVC)
mat <- boostRVC$Matrix
maxmat <- createMaxMat(mat)
cindirect <- neededCondDistr(mat)$indirect
revert <- function(m) {
if (length(dim(m)) == 2) {
return(m[nrow(m):1, ncol(m):1, drop = F])
} else {
return(m[nrow(m):1, ncol(m):1, , drop = F])
}
}
revertlist <- function(l) {
d <- length(l)
out <- lapply(d:1, function(k) rev(l[[k]]))
return(out)
}
pc <- revertlist(boostRVC$pair_copulas)
mat <- revert(mat)
maxmat <- revert(maxmat)
cindirect <- revert(cindirect)
vdirect <- vindirect <- array(dim = c(d, d, N))
## fill diagonal entries with independent uniforms
id <- 1:d + d*(0:(d - 1)) + rep((0:(N - 1)) * d^2, each = d)
vdirect[id] <- t(U[, rev(o)])
vindirect[1, 1,] <- vdirect[1, 1,]
i <- 2
k <- 1
pc[[k]][[i]]
object <- pc[[k]][[i]]
# parameter
par1 <- predict(object, newdata = X, type = "parameter")$parameter
par2 <- object$par2
# family
object <- pc[[k]][[i]]
# parameter
par1 <- predict(object, newdata = X, type = "parameter")$parameter
par2 <- object$par2
# family
object
as.numeric(object$family)
getFams(as.numeric(object$family))
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
data(data_bicop)
# fit object
object <- boostBiCopSelect(formula = ~.,
U = data_bicop[, 1:2],
X = data_bicop[, -c(1:2)],
familyset = NA,
control = boost_control(deselection = "attributable"))
object
# fit object
object <- boostBiCopSelect(formula = ~.,
U = data_bicop[, 1:2],
X = data_bicop[, -c(1:2)],
familyset = NA,
control = boost_control(deselection = "attributable"),
indeptest = 0.05)
object
boostBiCopSim(object,
N = 10,
X = data_bicop[, -c(1:2)])
boostBiCopPDF(object,
U = data_bicop[, 1:2],
X = data_bicop[, -c(1:2)])
boostBiCopCDF(object,
U = data_bicop[, 1:2],
X = data_bicop[, -c(1:2)])
# load simulated data
data(data_vinecop)
# create boostRVineMatrix
Matrix <- matrix(0, 5, 5, byrow = TRUE)
Family <- matrix(0, nrow = 5, ncol = 5)
Formula <- matrix("~ .", 5, 5, byrow = TRUE)
boostRVM <- boostRVineMatrix(Matrix = Matrix,
family = Family,
formula = Formula)
# fit object
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
boostRVinePDF(object,
U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)])
object
boostRVinePDF(object)
object <- boostRVineSeqEst(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
control = boost_control(deselection = "attributable"),
cores = 10)
object <- boostRVineSeqEst(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
control = boost_control(deselection = "attributable"),
cores = 10)
# create boostRVineMatrix
Matrix <- c(5, 0, 0, 0, 0,
2, 2, 0, 0, 0,
3, 3, 3, 0, 0,
1, 4, 4, 4, 0,
4, 1, 1, 1, 1)
Family <- c(0, 0, 0, 0, 0,
404, 0, 0, 0, 0,
1, 404, 0, 0, 0,
401, 301, 304, 0, 0,
1, 401, 304, 301, 0)
Matrix <- matrix(Matrix, 5, 5, byrow = TRUE)
Family <- matrix(Family, nrow = 5, ncol = 5, byrow = TRUE)
Formula <- matrix("~ .", 5, 5, byrow = TRUE)
boostRVM <- boostRVineMatrix(Matrix = Matrix,
family = Family,
formula = Formula)
# fit object
object <- boostRVineSeqEst(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
control = boost_control(deselection = "attributable"),
cores = 10)
boostRVinePDF(object)
summary(object)
sum(log( boostRVinePDF(object)))
# load simulated data
data(data_vinecop)
# create boostRVineMatrix
Matrix <- c(5, 0, 0, 0, 0,
2, 2, 0, 0, 0,
3, 3, 3, 0, 0,
1, 4, 4, 4, 0,
4, 1, 1, 1, 1)
Matrix <- matrix(Matrix, 5, 5, byrow = TRUE)
Family <- matrix(0, nrow = 5, ncol = 5)
Formula <- matrix("~ .", 5, 5, byrow = TRUE)
boostRVM <- boostRVineMatrix(Matrix = Matrix,
family = Family,
formula = Formula)
# fit object
object <- boostRVineCopSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
control = boost_control(deselection = "attributable"),
cores = 10)
boostRVinePDF(object)
summary(object)
boostRVinePDF(object)
sum(log(boostRVinePDF(object)))
# load simulated data
data(data_vinecop)
# create boostRVineMatrix
Matrix <- matrix(0, 5, 5, byrow = TRUE)
Family <- matrix(0, nrow = 5, ncol = 5)
Formula <- matrix("~ .", 5, 5, byrow = TRUE)
boostRVM <- boostRVineMatrix(Matrix = Matrix,
family = Family,
formula = Formula)
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
View(object)
# load simulated data
data(data_vinecop)
# create boostRVineMatrix
Matrix <- matrix(0, 5, 5, byrow = TRUE)
Family <- matrix(0, nrow = 5, ncol = 5)
Formula <- matrix("~ .", 5, 5, byrow = TRUE)
boostRVM <- boostRVineMatrix(Matrix = Matrix,
family = Family,
formula = Formula)
# fit object
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
boostRvinePDF(object)
boostRVinePDF(object)
library(boostCopulaext)
# fit object
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
View(object)
boostRVinePDF(object)
# fit object
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
trunclevel = 3,
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
View(object)
boostRVinePDF(object)
1:ncol(object$boostRVM$Matrix)
-c(1:ncol(object$boostRVM$Matrix))
U <- object$model_frame[, 1:ncol(object$boostRVM$Matrix)]
X <- object$model_frame[, -c(1:ncol(object$boostRVM$Matrix))]
# prepare na.action
data <- cbind(U, X)
data <- na.omit(data)
U <- data[, 1:ncol(U)]
X <- data[, -c(1:ncol(U))]
rm(data)
d <- ncol(U)
N <- nrow(U)
## reorder matrix to natural order
M <- object$boostRVM$Matrix
Mold <- M
o <- diag(M)
M <- reorderRVineMatrix(M)
boostRVinePDF(object)
d
o
object$boostRVM$Matrix
object$boostRVM$family
k <- 5
library(boostCopulaext)
# fit object
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
trunclevel = 3,
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
View(object)
object[["boostRVM"]][["Matrix"]]
boostRVinePDF(object)
summary(object)
# fit object
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
trunclevel = 3,
treecrit = "tau",
vine_type = 1,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
# fit object
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
trunclevel = 3,
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
trunclevel = NA,
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
trunclevel = NA,
treecrit = "tau",
vine_type = 1,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
object$pair_copulas[[5]][[1]]
object$pair_copulas[[5]][[1]]$family
library(boostCopulaext)
# load simulated data
data(data_vinecop)
# create boostRVineMatrix
Matrix <- matrix(0, 5, 5, byrow = TRUE)
Family <- matrix(0, nrow = 5, ncol = 5)
Formula <- matrix("~ .", 5, 5, byrow = TRUE)
boostRVM <- boostRVineMatrix(Matrix = Matrix,
family = Family,
formula = Formula)
# fit object
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
trunclevel = NA,
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
View(object)
object[["boostRVM"]][["Matrix"]]
library(boostCopulaext)
library(boostCopulaext)
# fit object
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
trunclevel = NA,
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
View(object)
object[["boostRVM"]][["family"]]
library(boostCopulaext)
# fit object
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
trunclevel = NA,
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
object[["boostRVM"]][["family"]]
object[["boostRVM"]][["Matrix"]]
i <- 5
k <- 1
pair_copulas[[i]][[k]]
object$pair_copulas[[i]][[k]]
k <- 5
k <- 4
object$pair_copulas[[i]][[k]]
object$pair_copulas[[i]][[k]]$family
as.numeric(object$pair_copulas[[i]][[k]]$family)
library(boostCopulaext)
# fit object
object <- boostRVineStructureSelect(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
familyset = c(1, 301, 304, 401, 404),
selectioncrit = "aic",
trunclevel = NA,
treecrit = "tau",
vine_type = 0,
control = boost_control(deselection = "attributable"),
cores = 10)
summary(object)
object[["boostRVM"]][["Matrix"]]
object[["boostRVM"]][["family"]]
boostRVinePDF(object)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
# load simulated data
data(data_vinecop)
# create boostRVineMatrix
Matrix <- c(5, 0, 0, 0, 0,
2, 2, 0, 0, 0,
3, 3, 3, 0, 0,
1, 4, 4, 4, 0,
4, 1, 1, 1, 1)
Family <- c(0, 0, 0, 0, 0,
404, 0, 0, 0, 0,
1, 404, 0, 0, 0,
401, 301, 304, 0, 0,
1, 401, 304, 301, 0)
Matrix <- matrix(Matrix, 5, 5, byrow = TRUE)
Family <- matrix(Family, nrow = 5, ncol = 5, byrow = TRUE)
Formula <- matrix("~ .", 5, 5, byrow = TRUE)
boostRVM <- boostRVineMatrix(Matrix = Matrix,
family = Family,
formula = Formula)
# fit object
object <- boostRVineSeqEst(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
control = boost_control(deselection = "attributable"),
cores = 1)
paste0(ncol(x$boostRVM$Matrix),"-dimensional R-vine")
x <- object
paste0(ncol(x$boostRVM$Matrix),"-dimensional R-vine")
length(x$pair_copulas)
library(boostCopulaext)
library(boostCopulaext)
paste0(2,"-dimensional R-vine")
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
library(boostCopulaext)
vinobject <- boostRVineSeqEst(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
control = boost_control(deselection = "attributable"),
cores = 1)
object <- boostRVineSeqEst(U = data_vinecop[, 1:5],
X = data_vinecop[, -c(1:5)],
boostRVM = boostRVM,
control = boost_control(deselection = "attributable"),
cores = 10)
View(object)
ncol(object[["boostRVM"]][["Matrix"]])
ncol(object[["boostRVM"]][["Matrix"]])
getOption("digits")
class(object)
